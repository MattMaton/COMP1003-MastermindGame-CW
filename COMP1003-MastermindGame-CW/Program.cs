using System;

namespace COMP1003_MastermindGame_CW
{
    /*
    <summary>
      Class that defines the queue entity used to store the history of the results.
    </summary>
    */ 
    class queue
    {
        public static int length_of_array = 4;             // The length of the array used in the queue.
        public static int back_of_queue = -1;                      // Last entry in the queue.
        public string[] data = new string[length_of_array]; 
    }
    class Program
    {
        /*
        <summary>
         Declaration of global variables which will be utilised by routines later in the program.
        <summary>
        <CodeToBreak> = The string variable that will store the code the player has to break.
        <ValueParam> = An integer variable that will determine the range of colours that can be selected, this is decided by the player.
        <LengthParam> = An integer variable that will determine how long the code is, this is decided by the player.
        <ResultArray> = This is an array of string values that corresponed to the player result of their entry after their turn.
         */
        private string CodeToBreak = null;
        private int ValueParam = 0;
        private int LengthParam = 0;
        private string[] ResultArray = new string[20];

        /*
        <summary>
         This is where the player will input their game parameters such as length of the code and possible colour options. The Computer
         will then take these inputs and generate a random code which follows these parameters.
        <summary>
         */
        private void DefineCode()
        {
            Console.WriteLine("How many pegs would you like there to be?");
            LengthParam = Convert.ToInt32(Console.ReadLine());
            bool ValueParamCheckPassed = false;
            while (ValueParamCheckPassed==false)
            {
                Console.WriteLine("How many different colours would you like there to be?");
                ValueParam = Convert.ToInt32(Console.ReadLine());
                if(ValueParam <= 9)
                {
                    ValueParamCheckPassed = true;
                }
                else
                {
                    Console.WriteLine("Error with input. The number of colours should be less than or equal to 9. Please try again.",Environment.NewLine);
                    Console.WriteLine(" ");
                }
            }

            var rand = new Random();
            for (int position = 0; position < LengthParam; position++)
            {
                CodeToBreak += (rand.Next(1, ValueParam + 1) + " ");
            }
        }

        /*
        <summary>
         The result from the tests conducted on the User's input is then checked to see if the User has correctly identified the code.
        </summary>
        <returns>
         A boolean is returned determing if the User's input correctly matched the secret code generated by the computer.
        </returns>
        <Parameters>
         A string representing the result of the User's input.
        </Parameters>
         */
        private bool CorrectAnswerTest(string Result)
        {
            bool IsCorrect;
            string[] StringToCheck = Result.Split(" ");
            int CorrectLength = 0;
            int UsersInputLength = 0;
            bool Found_End_of_Correct_Code = false;
            while (Found_End_of_Correct_Code == false)
            {
                try
                {
                    Convert.ToInt32(CodeToBreak[CorrectLength]);
                    CorrectLength += 1;
                }
                catch (Exception)
                {
                    Found_End_of_Correct_Code = true;
                }
            }
            bool Found_End_of_Users_Code = false;
            while (Found_End_of_Users_Code == false)
            {
                try
                {
                    Convert.ToInt32(StringToCheck[UsersInputLength]);
                    UsersInputLength += 1;
                }
                catch (Exception)
                {
                    Found_End_of_Users_Code = true;
                }
            }


            if (StringToCheck.Length == (CodeToBreak.Trim()).Split(" ").Length)
            {
                IsCorrect = true;
            }
            else
            {
                IsCorrect = false;
            }

            return IsCorrect;
        }

        /*
        <summary>
          Class that defines the queue entity used to store the history of the results.
        </summary>
        <queue> = The queue variable stores the array where values are added to.
        <value> = A string variable that is added to the queue.
        */
        static void AddElementToQueue(queue Queue, string value)
        {
            if (queue.back_of_queue == queue.length_of_array)
            {
                Console.WriteLine("Error, queue is full.");
                Console.ReadLine();

            }
            else
            {
                queue.back_of_queue += 1;
                Queue.data[queue.back_of_queue] = value;
            }
        }

        /*
        <summary>
          Class that defines the queue entity used to store the history of the results.
        </summary>
        <queue> = The queue variable stores the array where values are added to.
        */
        static void RedefineQueueLength(queue Queue)
        {
            queue.length_of_array *= 2;
            string[] SecondResultQueue = new string[queue.length_of_array];
            for (int ItemPosition = 0; ItemPosition < queue.length_of_array/2; ItemPosition++)
            {
                SecondResultQueue[ItemPosition] = Queue.data[ItemPosition];
            }
            Queue.data = SecondResultQueue;

        }

        /*
        <summary>
         This is where the player's input is checked against the game's parameters to ensure their entry follows these parameters.
        </summary>
        <returns>
         A string array is returned containing the user's input after it has been checked.
        </returns>
         */
        private string[] CheckUserInput()
        {
            int ParamPassed = 0;
            int countofitems;
            string UsersInputString = null;
            int Length_of_UsersInput;
            string[] UsersInputArray = new string[0];
            while (ParamPassed != (LengthParam + 1))
            {
                ParamPassed = 0;
                UsersInputString = Console.ReadLine();
                countofitems = 0;
                Length_of_UsersInput = 0;
                bool Found_End_of_Array = false;
                while (Found_End_of_Array == false)
                {
                    try
                    {
                        Convert.ToInt32(UsersInputString[Length_of_UsersInput]);
                        Length_of_UsersInput += 1;
                    }
                    catch (Exception)
                    {
                        Found_End_of_Array = true;
                    }
                }
                UsersInputArray = new string[Length_of_UsersInput];
                for (int position = 0; position<Length_of_UsersInput;position++)
                {
                    UsersInputArray[position] = Convert.ToString(UsersInputString[position]);
                }
                for (int value = 0; value < Length_of_UsersInput; value++)
                {
                    countofitems += 1;
                }
                if (countofitems == LengthParam)
                {
                    ParamPassed += 1;
                    for (int position = 0; position < LengthParam; position++)
                    {
                        if (((Convert.ToInt32(UsersInputArray[position]) <= ValueParam) && (Convert.ToInt32(UsersInputArray[position]) > 0)))
                        {
                            ParamPassed += 1;
                        }
                        else
                        {
                            //Parameter failed the checks
                        }
                    }
                }
                else
                {
                    //Parameter failed the checks
                }
                if (ParamPassed != (LengthParam + 1))
                {
                    Console.WriteLine("Error with input format. Please try again.");
                }
                else
                {
                    //Parameter passed the checks
                }
            }
            return UsersInputArray;
        }

        /*
        <summary>
         The player's input is then tested against the computer generated code in order to return the clues (i.e. White = Correct value wrong position, Black = Correct value and correct position).
        </summary>
        <returns>
         A string array is returned containing the result of the tests conducted on the user's input.
        </returns>
        <Parameters>
         A string array representing the User's input.
        </Parameters>
         */
        private string[] TestUserInput(string[] UserInput)
        {
            string[] result = new string[2];
            string white = " ";
            string black = " ";
            string[] SecretCode = CodeToBreak.Trim().Split(" ");

            for (int position = 0; position < LengthParam; position++)
            {
                if (SecretCode[position] == UserInput[position])
                {
                    black += "Black ";
                    UserInput[position] = "";
                }
                else
                {
                    //Selected value from user's input did not match position and character of the secret code. 
                }
            }

            for (int item=0;item<LengthParam; item++)
            {
                for (int value = 0; value < LengthParam; value++)
                {
                    if(UserInput[item] == SecretCode[value])
                    {
                        white+="White ";
                        UserInput[item] = "";
                    }
                    else
                    {
                        //Selected value from user's input did not match any character of the secret code. 
                    }
                }
            }

            result[0] = white;
            result[1] = black;

            return result;
        }

        /*
        <summary>
         This function enables the replayability of the game. All values are reset and the console is cleared ready for the next game.
        </summary>
         */
        private void PlayAgain()
        {
            Console.Clear();
            CodeToBreak = null;
            ValueParam = 0;
            LengthParam = 0;
            for (int Position_In_Array=0; Position_In_Array < 20 ; Position_In_Array++)
            {
                ResultArray[Position_In_Array] = "";
            }
            MainLoop();
        }

        /*
        <summary>
         The main function of the program where all the other functions are called and utilised.
        </summary>
         */
        private void MainLoop()
        {
            DefineCode();
            bool Correct = false;
            int RoundCount = 0;
            queue ResultQueue = new queue();
            while (Correct==false)
            {
                if (queue.back_of_queue == queue.length_of_array-1)
                {
                    RedefineQueueLength(ResultQueue);
                    Console.WriteLine("redefine");
                }
                else
                {
                    //continue
                }
                Console.Clear();
                Console.WriteLine("Number of pegs: "+LengthParam);
                Console.WriteLine("Number of colours: " + ValueParam);
                Console.WriteLine("Number of gueses: " + RoundCount);
                Console.WriteLine("-------------------------------------------");
                for (int ItemPosition=0;ItemPosition<RoundCount;ItemPosition++)
                {
                    Console.WriteLine(ResultQueue.data[ItemPosition]);
                }
                string[] OutputUserInput = CheckUserInput();
                string OutputString = null;
                for (int value = 0; value < LengthParam; value++)
                {
                    OutputString += Convert.ToString(OutputUserInput[value]);
                }
                string[] TestInput = TestUserInput(OutputUserInput);
                string ResultMessage = OutputString + " - " + TestInput[0].Trim() + " " + TestInput[1].Trim();
                Console.WriteLine(ResultMessage);
                AddElementToQueue(ResultQueue, ResultMessage);
                Correct = CorrectAnswerTest(TestInput[1].Trim());
                RoundCount += 1;
            }
            Console.WriteLine("Congratulations! You cracked the code!");
            Console.WriteLine("Type 'Play again' to start a new game.");
            string PlayAgainvar = Console.ReadLine();
            if (PlayAgainvar== "Play again")
            {
                PlayAgain();
            }
            else
            {
                Console.WriteLine("Thank you for playing!");
            }
        }

        static void Main(string[] args)
        {
            Program program = new Program();
            program.MainLoop();
        }
    }
}
